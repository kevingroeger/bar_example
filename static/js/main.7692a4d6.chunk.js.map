{"version":3,"sources":["images/bar.png","images/drinks.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","withController","className","layers","image","bar","amount","style","height","drinks","Container","fluid","Row","Col","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,iPCuG5BC,+BA/Ff,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,mBAAD,KACE,kBAAC,iBAAD,CACEC,OAAQ,CACN,CACEC,MAAOC,IACPC,OAAQ,KAGZC,MAAO,CACLC,OAAQ,YAId,oDACA,yBAAKN,UAAU,kBACb,4IACA,sJAEF,kBAAC,mBAAD,KACE,kBAAC,iBAAD,CACEC,OAAQ,CACN,CACEC,MAAOK,IACPH,OAAQ,KAGZC,MAAO,CACLC,OAAQ,YAId,yBAAKN,UAAU,WACb,kDACA,+BACE,+BACE,4BACE,uCACA,sDAEF,4BACE,yCACA,sDAEF,4BACE,yCACA,sDAEF,4BACE,2CACA,sDAEF,4BACE,wCACA,sDAEF,4BACE,wCACA,sDAEF,4BACE,wCACA,yDAKR,yBAAKA,UAAU,UACb,kBAACQ,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,qDACA,mDACA,8CACA,kDAEF,kBAACA,EAAA,EAAD,KACE,wCACA,2BAAG,uBAAGX,UAAU,4BAAhB,oBACA,uBAAGY,KAAK,8BAA6B,uBAAGZ,UAAU,oBAAlD,wBACA,yBAAKA,UAAU,eACb,uBAAGA,UAAU,2BACb,uBAAGA,UAAU,0BACb,uBAAGA,UAAU,6BCjFTa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7692a4d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bar.c8dfe633.png\";","module.exports = __webpack_public_path__ + \"static/media/drinks.01614953.png\";","import React from 'react'\nimport { withController, ParallaxProvider, ParallaxBanner } from 'react-scroll-parallax'\nimport { Row, Col, Container } from 'react-bootstrap'\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport bar from './images/bar.png'\nimport drinks from './images/drinks.png'\nimport './App.css'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <ParallaxProvider>\n        <ParallaxBanner\n          layers={[\n            {\n              image: bar,\n              amount: 0.5\n            }\n          ]}\n          style={{\n            height: '400px'\n          }}\n        />\n      </ParallaxProvider>\n      <h1>Barhouse Nürnberg</h1>\n      <div className='content spacer'>\n        <p>Im Barhouse Nürnberg findest du auf mehr als 200m² das perfekte Erlebnis für einen gelungenen Abend.</p>\n        <p>Wir bieten dir über 40 verschiedene alkoholische und antialkoholische Longdrinks, Cocktails, Shots und vieles mehr.</p>\n      </div>\n      <ParallaxProvider>\n        <ParallaxBanner\n          layers={[\n            {\n              image: drinks,\n              amount: 0.6\n            }\n          ]}\n          style={{\n            height: '200px'\n          }}\n        />\n      </ParallaxProvider>\n      <div className='content'>\n        <h5>Öffnungszeiten:</h5>\n        <table>\n          <tbody>\n            <tr>\n              <th>Montag:</th>\n              <td>11:00 Uhr - 00:00 Uhr</td>\n            </tr>\n            <tr>\n              <th>Dienstag:</th>\n              <td>11:00 Uhr - 00:00 Uhr</td>\n            </tr>\n            <tr>\n              <th>Mittwoch:</th>\n              <td>15:00 Uhr - 00:00 Uhr</td>\n            </tr>\n            <tr>\n              <th>Donnerstag:</th>\n              <td>11:00 Uhr - 00:00 Uhr</td>\n            </tr>\n            <tr>\n              <th>Freitag:</th>\n              <td>11:00 Uhr - 04:00 Uhr</td>\n            </tr>\n            <tr>\n              <th>Samstag:</th>\n              <td>11:00 Uhr - 04:00 Uhr</td>\n            </tr>\n            <tr>\n              <th>Sonntag:</th>\n              <td>11:00 Uhr - 00:00 Uhr</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className='footer'>\n        <Container fluid>\n          <Row>\n            <Col>\n              <h5>Barhouse Nürnberg:</h5>\n              <p> Musterstraße 123</p>\n              <p> Max Mustermann</p>\n              <p> 90400 Nürnberg</p>\n            </Col>\n            <Col>\n              <h5>Kontakt:</h5>\n              <p><i className='fas fa-phone-square-alt' /> 0911 / 01234567</p>\n              <a href='mailto:kontakt@example.com'><i className='fas fa-envelope' /> kontakt@example.com</a>\n              <div className='socialmedia'>\n                <i className='fab fa-facebook-square' />\n                <i className='fab fa-twitter-square' />\n                <i className='fab fa-instagram' />\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </div>\n  )\n}\n\nexport default withController(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}